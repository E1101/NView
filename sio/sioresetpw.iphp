<?php
mb_internal_encoding('UTF-8');

class SIOResetPW {
	use Form;
	const SIG = "sioresetpw_";
	public static function sig() { return static::SIG; }
	private static $munge="sha2(concat(ifnull(username,id),'-',ifnull(password,id),'-',ifnull(email,id),'-',ifnull(ts,id)),256)";
	private static $v=array();
	public static $field_keys = array();
	
	public static function initialise() {
//static arrays
		static::$v=array(static::SIG=>static::SIG."v.ixml");
		static::$field_keys = array(
			static::SIG.'prompt_password',
			static::SIG.'prompt_retype_password',
			static::SIG.'button_new_password'
		);
	
//translations
		$en = array(
			static::SIG .'prompt_password' => "Password",
			static::SIG .'prompt_retype_password' => "Retype Password",
			static::SIG .'button_new_password'=>"Set New Password",
			static::SIG .'errors_password_different'=>" Both passwords must be the same.",
			static::SIG .'errors_password_empty'=>" Enter a password.",
			static::SIG .'errors_password_short'=>" Passwords must be more than six characters.",
			static::SIG .'errors_password_not_username'=>" Passwords must be different from your username!"
		);
		Dict::set($en,'en');
	}
	
	function __construct($key=NULL,$custom_views=array()) {
		static::$v = array_replace(static::$v,$custom_views);
		$this->iniForm($key,@static::$v[static::SIG]);
		$this->key=$key; //This will be the siof value passed by url.
		$this->table="user";
		$this->setfld('password');
		$this->setfld('passwordb','','!skip');
	}
	
/**
 * 'validate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * validate all fields in this->fields.
 * errors are placed into the this->view.
 */
	protected function validate() {
		$retval = $this->valid;
		if (isset($this->fields['password'][0]) && isset($this->fields['passwordb'][0])) {
			$pwa=$this->fields['password'][0];
			$pwb=$this->fields['passwordb'][0];
			if ($pwa !== $pwb ) {
				$this->seterr("password",Dict::get(static::SIG .'errors_password_different'));
				$retval = false;
			} 
			if (strlen($pwa) < 7) {
				$this->seterr("password",Dict::get(static::SIG .'errors_password_short'));
				$retval = false;
			} 
			if ($pwa === Settings::$usr['RU']) {
				$this->seterr("password",Dict::get(static::SIG .'errors_password_not_username'));
				$retval = false;
			} 
		} else {
			$retval = false;
			$this->seterr("password",Dict::get(static::SIG .'errors_password_empty'));
		}
		$this->valid = $retval;
	}

	protected function commit() {
		$ha=Settings::esc($this->key); //this comes via the url...
		$query= "select username from user where ".self::$munge."='".$ha."'";
		if ($rs = Settings::$sql->query($query)) {
			while ($f = $rs->fetch_assoc()) {
				$ph=Settings::esc(hash('sha256',$f['username'].hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['password'][0])));
				$cond=" and ".self::$munge."='".$ha."'";
				$qry="update " . $this->table . " set password='".$ph."' where active='on' ".$cond ;
				Settings::$sql->query($qry);
			
			}
			$rs->close();
		}
		$this->show = false;
		return true;
	}
	
	protected function populate() {
		$this->tset(static::$field_keys);
	}
	
	public static function conforms($hat=NULL) {
		$retval=false;
		$ha=Settings::esc($hat); 
		$query= "select id from user where ".self::$munge."='".$ha."'";
		if ($rs = Settings::$sql->query($query)) {
			if (Settings::rows($rs) == 1) {
				$retval=true;
			}
			$rs->close();
		}
		return $retval;
	}
}

