<?php
mb_internal_encoding('UTF-8');

class SIOSetEmail {
	use Form;
	public static function sig() {
		return "siosetem_";
	}
	function __construct($key=NULL,$v=NULL) {
		$this->iniForm($key,$v);
		$this->key=$key;
		$this->table="user";
		$this->setfld('password','','!skip');
		$this->setfld('emailp');
		$this->setfld('emailb','','!skip');
		
		$this->en_fields = array(
			$this->sig() .'prompt_new_email'=>"New Email",
			$this->sig() .'prompt_retype_new_email'=>"Retype New Email",
			$this->sig() .'prompt_your_password'=>"Password",
			$this->sig() .'button_set_email'=>"Set New Email"
		);
		$this->en_extras = array(
			$this->sig() .'errors_emails_unmatched'=>"Both emails must be the same.",
			$this->sig() .'errors_email_badformat'=>"The email format is not recognised",
			$this->sig() .'note_email_change_title'=>"Email Change Request",
			$this->sig() .'note_email_change_message'=>"It appears that you have chosen to change your e-mail to the one that you received this message on.",
			$this->sig() .'note_email_change_action_link'=>"PLEASE CONTINUE HERE",
			$this->sig() .'mesg_email_check_email'=>"To set your email address, confirm the change via the email just sent to you.",
			$this->sig() .'mesg_email_change_success'=>"You have successfully changed your email.",
			$this->sig() .'mesg_see_html_alt'=>"Please see the html alternative of this email."
		);
		Dict::set($this->en_fields,'en');
		Dict::set($this->en_extras,'en');
		
	}
	
/**
 * 'validate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * validate all fields in this->fields.
 * errors are placed into the this->view.
 */
	protected function validate() {
		$retval = false;
		if (isset($this->fields['emailp'][0]) && isset($this->fields['emailb'][0])) {
			$ema=$this->fields['emailp'][0];
			$emb=$this->fields['emailb'][0];
			if ($ema !== $emb ) {
				$this->seterr("emailp",Dict::get($this->sig() .'errors_emails_unmatched'));
				$retval = false;
			}  else {
				$retval = true;
			}
		}
		$this->valEmail('emailp',Dict::get($this->sig() .'errors_email_badformat'));
		if ($this->valid) {
			$this->valid = $retval;
		}
	}

	protected function commit() {
		$ph=hash('sha256',Settings::$usr['RU'] . hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['password'][0]));
		$this->fields['password'][0]='';
		$qpy="select count(id) as ok from " . $this->table . " where active='on' and id='" .Settings::$usr['ID']. "' and password='" . $ph . "' and active='on'";
		if ($ry = Settings::$sql->query($qpy)) {
			if (strcmp($ry->fetch_row()[0],"1") === 0) {
				$em=$this->fields['emailp'][0];
				$em=Settings::esc($em);
				Settings::$sql->query("update user set ts=null,emailp='".$em."' where id='".Settings::$usr['ID']."'");
				$qry="select username,sha2(concat(ifnull(username,id),'+',ifnull(password,id),'+',ifnull(email,id),'+',ifnull(ts,id)),256) as munge from " . $this->table . " where id='" .Settings::$usr['ID']. "' and active='on'";
				if ($rx = Settings::$sql->query($qry)) {
					require_once("/websites/shared/lib/PHPMailer/PHPMailerAutoload.php");
					while ($f = $rx->fetch_assoc()) {
						$mail_v=new NView('siosetemmail_v.ixml');
						$mail_v->tset($this->en_extras);
						$mail = new PHPMailer();
						$mail->isSendmail();
						$mail->CharSet='utf-8';
						$mail->Encoding='base64';
						$mail->setFrom('no_reply@redsnapper.net', Dict::get($this->sig() .'note_email_change_title'));
						$mail->addAddress($em,Settings::$usr['RU']); 				
						$mail->Subject = Dict::get($this->sig() .'note_email_change_title');
						$mail->isHTML(true);
						$url=$_SERVER["SCRIPT_URI"];
						if (strpos($url, '?') !== false) {
							$url .= '&amp;siof=' . $f['munge'];
						} else {
							$url .= '?siof=' . $f['munge'];
						}			
						$mail_v->set("//*[@data-xp='ha']/@href",$url);
						$mail->Body = $mail_v->show(false);
						$mail->AltBody=Dict::get($this->sig() .'mesg_see_html_alt');
						$mail->send();
					}
					$rx->close();
				}
				$ry->close();
			}
		}
		$this->show = false;
		return true;
	}
	
	protected function populate() {
		$this->tset($this->en_fields);
	}
	
	public static function conforms($hat=NULL) {
		$retval=false;
		$ha=Settings::esc($hat); 
		$query= "select id from user where id='" .Settings::$usr['ID']. "' and sha2(concat(ifnull(username,id),'+',ifnull(password,id),'+',ifnull(email,id),'+',ifnull(ts,id)),256)='".$ha."'";
		if ($rs = Settings::$sql->query($query)) {
			if (Settings::rows($rs) == 1) {
				$retval=true;
			}
			$rs->close();
		}
		return $retval;
	}
	
	public static function pushit($hat=NULL) {
		$ha=Settings::esc($hat); 
		$query= "update user set email=emailp where id='" .Settings::$usr['ID']. "' and sha2(concat(ifnull(username,id),'+',ifnull(password,id),'+',ifnull(email,id),'+',ifnull(ts,id)),256)='".$ha."'";
		Settings::$sql->query($query);
		$nv = new NView("siosetems_v.ixml");
		$nv->tset($this->en_extras);
		return $nv;
	}
	
}

