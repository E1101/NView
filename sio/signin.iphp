<?php
mb_internal_encoding('UTF-8');

/**
 * class 'SioSignIn'
 */
class SioSignIn {
	use Form;
	private $en_fields,$en_errors;	
	private $gr_fields,$gr_errors;	
	public static function sig() {
		return "siosignin_";
	}

/**
 * '__construct'
 */
	function __construct($key=NULL,$v=NULL) {
		$this->iniForm($key,$v);
		$this->key=$key;
		$this->table="user";
		$this->setfld('username');
		$this->setfld('password');
		
		$this->en_fields = array(
			$this->sig() .'prompt_username' => "Username",
			$this->sig() .'prompt_password'=>"Password",
			$this->sig() .'button_signin'=>"Sign In",
			$this->sig() .'button_forgot'=>"Forgot Password",
			$this->sig() .'button_register'=>"Register"
		);
		$this->en_errors = array(
			$this->sig() .'errors_username_unmatched'=>"Either the username or password don't match our records",
			$this->sig() .'errors_username_empty'=>"You need to enter your username"
		);
		
		$this->gr_fields = array(
			$this->sig() .'prompt_username' => "Όνομα Χρήστη",
			$this->sig() .'prompt_password'=>"Κωδικός",
			$this->sig() .'button_signin'=>"Είσοδος",
			$this->sig() .'button_forgot'=>"Ξέχασα τον κωδικό μου",
			$this->sig() .'button_register'=>"Εγγραφή"
		);
		$this->gr_errors = array(
			$this->sig() .'errors_username_unmatched'=>"Το όνομα χρήστη ή ο κωδικός δεν ειναι σωστά"
		);
		
		Dict::set($this->en_fields,'en');
		Dict::set($this->en_errors,'en');
		
		Dict::set($this->gr_fields,'gr');
		Dict::set($this->gr_errors,'gr');
		
	}

/**
 * 'ident'
 *  This overrides the standard ident - we don't want to check usr value for signin.
 */
	private function ident() {
		return md5($this->signature);
	}

/**
 * 'validate'
 * fn fulfilling form trait func, which deals with different button presses.
 * These are set by values in the buttons on the view.
 * fn 'save' - the default action - is handled higher up.
 */
	protected function func() {
		switch ($this->fields['_fn'][0]) {
			case 'forgot': {
				$sf=new SIOForgot();
				return $sf->form();
			} break;
			case 'register': {
				$sf=new SIOReg();
				return $sf->form();
			} break;
		}
	}
/**
 * 'validate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * validate all fields in this->fields.
 * errors are placed into the this->view.
 */
	protected function validate() {
		$retval = false;
		if (isset($this->fields['username'][0]) && isset($this->fields['password'][0])) {
			$un=$this->fields['username'][0];
			$ph=hash('sha256',$un . hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['password'][0]));
			$this->fields['password'][0]='';
			$qry="select count(id) as ok from " . $this->table . " where active='on' and username='" .$un. "' and password='" . $ph . "'";
			if ($rx = Settings::$sql->query($qry)) {
				if (strcmp($rx->fetch_row()[0],"1") === 0) {
					$retval=true;
				} else {
					$this->seterr("username",Dict::get('siosignin_errors_username_unmatched'));
				}
				$rx->close();
			}
		} else {
			$this->seterr("username",Dict::get($this->sig().'errors_username_empty'));
		}
		$this->valid = $retval;
	}

/**
 * 'commit'
 * fn OVERLOADING trait 'Form'.
 */
	protected function commit() {
		Session::set('username',$this->fields['username'][0]);
		Settings::usr();
		return true;
	}

/**
 * 'populate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * place this->fields array into view.
 */
	protected function populate() {
		$this->vset('username');
		$this->tset($this->en_fields);
	}

}
