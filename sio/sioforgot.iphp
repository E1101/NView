<?php
mb_internal_encoding('UTF-8');

/**
 * This requires 
 */
class SioForgot {
	use Form;
	private static $munge="sha2(concat(ifnull(username,id),'-',ifnull(password,id),'-',ifnull(email,id),'-',ifnull(ts,id)),256)";
	const SIG = "sioforgot_";
	public static function sig() { return static::SIG; }
	private static $v=array(
		"sioforgot_"=>"sioforgot_v.ixml",
		"sioforgot_mailbody"=>"sioforgot_mv.ixml",
		"sioforgot_success"=>"sioforgot_sv.ixml"
	);
	public static $field_keys = array(
		"sioforgot_prompt_emailaddress",
		"sioforgot_button_resetpassword"
	);
	public static $mail_keys = array(
		"sioforgot_mail_head",
		"sioforgot_mail_userhint",
		"sioforgot_mail_url_text",
		"sioforgot_mail_body"
	);
	public static $extra_keys = array(
		"sioforgot_commit_msg"
	);
	public static function initialise() {
		$en = array(
			static::SIG .'prompt_emailaddress' => "Email",
			static::SIG .'button_resetpassword'=>"Reset Password",
			static::SIG .'errors_bad_email'=>"The email address appears to be wrong",
			static::SIG .'commit_msg'=>"You should shortly receive an email with instructions for resetting your password.",
			static::SIG .'mail_head'=>"Password Reset Request",
			static::SIG .'mail_body'=>"It appears that you have posted a password reset request.",
			static::SIG .'mail_userhint'=>"Your username is:",
			static::SIG .'mail_url_text'=>"PLEASE CONTINUE HERE",
			static::SIG .'mail_see_alt'=>"Please see the html alternative of this email",
			static::SIG .'mail_subject'=>'Password Reset'
		);
		Dict::set($en,'en');
	}

/**
 * '__construct'
 */
	function __construct($key=NULL,$custom_views=array()) {
		static::$v = array_replace(static::$v,$custom_views);
		$this->iniForm($key,@static::$v[static::SIG]);
		$this->key=$key;
		$this->table="user";
		$this->setfld('username');
		$this->setfld('email');	
	}

/**
 * 'commit'
 * fn OVERLOADING trait 'Form'.
 */
	public function commitv() { 
		$cv=new NView(@static::$v[static::SIG."success"]);
		$cv->tset(static::$extra_keys);
		return $cv;
	}

/**
 * 'validate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * validate all fields in this->fields.
 * errors are placed into the this->view.
 */
	protected function validate() {
		$this->valEmail('email',Dict::get(static::SIG .'errors_bad_email'));
	}

/**
 * 'commit'
 * fn OVERLOADING trait 'Form'.
 */
	protected function commit() {
		$this->show=false;
		$em=$this->fields['email'][0];
		$qry="select username,".self::$munge." as munge from " . $this->table . " where active='on' and email='" . $em . "'";
		if ($rx = Settings::$sql->query($qry)) {
			require_once("/websites/shared/lib/PHPMailer/PHPMailerAutoload.php");
			while ($f = $rx->fetch_assoc()) {
				$mail_v=new NView(@static::$v[static::SIG."mailbody"]);
				$mail_v->tset(static::$mail_keys);
				$mail = new PHPMailer();
				$mail->isSendmail();
				$mail->CharSet='utf-8';
				$mail->Encoding='base64';
				$mail->setFrom('auto@redsnapper.net', Dict::get(static::SIG .'mail_subject') );
				$mail->addBCC('auto@redsnapper.net', 'Auto'); //bcc			
				$mail->addAddress($em,$f['username']); 				
				$mail->Subject = Dict::get(static::SIG .'mail_subject');
				$mail->isHTML(true);
				$url=$_SERVER["SCRIPT_URI"];
				if (strpos($url, '?') !== false) {
					$url .= '&amp;siof=' . $f['munge'];
				} else {
					$url .= '?siof=' . $f['munge'];
				}			
				$mail_v->set("//*[@data-xp='un']/child-gap()",$f['username']);
				$mail_v->set("//*[@data-xp='ha']/@href",$url);
				$mail->Body = $mail_v->show(false);
				$mail->AltBody= Dict::get(static::SIG .'mail_see_alt');
				$mail->send();
			}
			$rx->close();
		}
		return true;
	}

/**
 * 'populate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * place this->fields array into view.
 */
	protected function populate() {
		$this->vset('email');
		$this->tset(static::$field_keys);
	}
}
