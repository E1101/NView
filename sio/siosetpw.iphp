<?php
mb_internal_encoding('UTF-8');

class SIOSetPW {
	use Form;
	public static function sig() {
		return "siosetpw_";
	}
	
	private static $en_static=array(
			$this->sig() ."mesg_success"=>"You successfully changed your password."
	);

	function __construct($key=NULL,$v=NULL) {
		$this->iniForm($key,$v);
		$this->key=$key;
		$this->table="user";
		$this->setfld('password','','!skip');
		$this->setfld('passwordn','','!skip');
		$this->setfld('passwordb','','!skip');
		
		$this->en_fields = array(
			$this->sig() ."prompt_original_password"=>"Current Password",
			$this->sig() ."prompt_new_password"=>"New Password",
			$this->sig() ."prompt_retype_new_password"=>"Retype New Password",
			$this->sig() ."button_set_new_password"=>"Set New Password"
		);
		$this->en_extras = array(
			$this->sig() ."errors_orig_pw_wrong"=>" The current password doesn't match our records.",
			$this->sig() ."errors_password_empty"=>" You must enter your current password.",
			$this->sig() ."errors_new_pw_empty"=>" You must enter a new password.",
			$this->sig() ."errors_new_pw_different"=>" Both passwords must be the same.",
			$this->sig() ."errors_new_pw_too_short"=>" Passwords must be more than 6 characters.",
			$this->sig() ."errors_new_pw_too_simple"=>" Passwords must be different from your username!"
		);
		Dict::set($this->en_fields,'en');
		Dict::set($this->en_extras,'en');		
		
	}
	
/**
 * 'validate'
 * fn fulfilling abstract requirement of trait 'Form'.
 * validate all fields in this->fields.
 * errors are placed into the this->view.
 */
	protected function validate() {
		$retval = true;
		if (isset($this->fields['password'][0])) {
			$ph=hash('sha256',Settings::$usr['RU'] . hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['password'][0]));
			$this->fields['password'][0]='';
			$qry="select count(id) as ok from " . $this->table . " where active='on' and id='" .Settings::$usr['ID']. "' and password='" . $ph . "'";
			if ($rx = Settings::$sql->query($qry)) {
				if (strcmp($rx->fetch_row()[0],"1") !== 0) {
					$retval = false;
					$this->seterr("password",Dict::get($this->sig().'errors_orig_pw_wrong'));
				}
				$rx->close();
			}
		} else {
			$this->seterr("password",Dict::get($this->sig().'errors_password_empty'));
			$retval = false;
		}
		if (isset($this->fields['passwordn'][0]) && isset($this->fields['passwordb'][0])) {
			$pwa=$this->fields['passwordn'][0];
			$pwb=$this->fields['passwordb'][0];
			if ($pwa !== $pwb ) {
				$this->seterr("passwordn",Dict::get($this->sig().'errors_new_pw_different'));
				$retval = false;
			} 
			if (strlen($pwa) < 7) {
				$this->seterr("passwordn",Dict::get($this->sig().'errors_new_pw_too_short'));
				$retval = false;
			} 
			if ($pwa === Settings::$usr['RU']) {
				$this->seterr("passwordn",Dict::get($this->sig().'errors_new_pw_too_simple'));
				$retval = false;
			} 
		} else {
			$this->seterr("passwordn",Dict::get($this->sig().'errors_new_pw_empty'));
			$retval = false;
		}
		$this->valid = $retval;
	}

	protected function commit() {
		$ph=Settings::esc(hash('sha256',Settings::$usr['RU'] . hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['passwordn'][0])));
		$qry="update " . $this->table . " set password='".$ph."' where active='on' and id='" .Settings::$usr['ID']. "'";
		Settings::$sql->query($qry);
		$this->show = false;
		return true;
	}
	
	protected function populate() {
		$this->tset($this->en_fields);	
	}
	
	public static function pushit() {
		Dict::set(self::$en_static,'en');
		$nv = new NView("siosetpws_v.ixml");
		$nv->tset(self::$en_static);
		return $nv;
	}
	
	
}

