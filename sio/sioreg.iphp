<?php
mb_internal_encoding('UTF-8');

class SioReg {
	use Form;
	const SIG="sioreg_";
	public static function sig() { return static::SIG; }
	private static $munge="sha2(concat(ifnull(username,id),'_',ifnull(password,id),'_',ifnull(email,id),'_',ifnull(ts,id)),256)";
	private static $v=array();
	private static $use_un=true;

	function __construct($key=NULL,$custom_views=array()) {
		static::$v = array_replace(static::$v,$custom_views);
		$this->iniForm($key,@static::$v[static::SIG]);
		$this->key=$key;
		$this->table="user";
		if(static::$use_un) {
			$this->setfld('username');
		}
		$this->setfld('emailp');
		$this->setfld('passwordn','','!skip');
		$this->setfld('passwordb','','!skip');
	}
	
	protected function validate() {
		$retval = true;
		if(static::$use_un) {
			if (isset($this->fields['username'][0])) {
				$un=Settings::esc($this->fields['username'][0]);
				$qry="select count(id) as ok from " . $this->table . " where username='" . $un . "'";
				if ($rx = Settings::$sql->query($qry)) {
					if (strcmp($rx->fetch_row()[0],"0") !== 0) {
						$retval = false;
						$this->seterr("username",Dict::get(static::SIG.'errors_username_exists'));
					} 
					$rx->close();
				}
				if (isset($this->fields['passwordn'][0]) && ($this->fields['passwordn'][0] === $this->fields['username'][0])) {
					$this->seterr("passwordn",Dict::get(static::SIG.'errors_new_pw_too_un_simple'));
					$retval = false;
				} 
			} else {
				$this->seterr("username",Dict::get(static::SIG.'errors_no_username'));
				$retval = false;
			}
		}

		if (isset($this->fields['emailp'][0])) {
			$em=Settings::esc($this->fields['emailp'][0]);
			$qry="select count(id) as ok from " . $this->table . " where emailp='" . $em . "'";
			if ($rx = Settings::$sql->query($qry)) {
				if (strcmp($rx->fetch_row()[0],"0") !== 0) {
					$retval = false;
					$this->seterr("emailp",Dict::get(static::SIG.'errors_email_exists'));
				} 
				$rx->close();
			}
			if (isset($this->fields['passwordn'][0]) && ($this->fields['passwordn'][0] === $this->fields['emailp'][0])) {
				$this->seterr("passwordn",Dict::get(static::SIG.'errors_new_pw_too_em_simple'));
				$retval = false;
			} 
		} else {
			$this->seterr("emailp",Dict::get(static::SIG.'errors_no_email'));
			$retval = false;
		}
		if (isset($this->fields['passwordn'][0]) && isset($this->fields['passwordb'][0])) {
			$pwa=$this->fields['passwordn'][0];
			$pwb=$this->fields['passwordb'][0];
			if ($pwa !== $pwb ) {
				$this->seterr("passwordn",Dict::get(static::SIG.'errors_new_pw_different'));
				$retval = false;
			} 
			if (strlen($pwa) < 7) {
				$this->seterr("passwordn",Dict::get(static::SIG.'errors_new_pw_too_short'));
				$retval = false;
			} 
		} else {
			$this->seterr("passwordn",Dict::get(static::SIG.'errors_no_password'));
			$retval = false;
		}
		$this->valEmail('emailp',Dict::get(static::SIG .'errors_email_badformat'));
		if ($this->valid) {
			$this->valid = $retval;
		}
	}
	
	protected function commit() {
		$unm = NULL;
		if(static::$use_un) {
			if (isset($this->fields['username'][0])) {
				$unm=$this->fields['username'][0];
				$unm=Settings::esc($unm);
				$extra="username='".$unm."',";
				$qry="select ".static::$munge." as munge,emailp from " . $this->table . " where username='" .$unm. "' and active='xx'";
			}
		} else { //using email
			if (isset($this->fields['emailp'][0])) { //not empty
				$unm=$this->fields['emailp'][0];
				$unm=Settings::esc($unm);
				$extra="username=sha2('".$unm."',256),";
				$qry="select ".static::$munge." as munge,emailp from " . $this->table . " where emailp='" .$unm. "' and active='xx'";
			} 
		}
		$em=$this->fields['emailp'][0]; $em=Settings::esc($em);
		$ph=hash('sha256', $unm . hex2bin('5BE0BDA8E0BDBCE0BDBEE0BC8BE0BDA7E0BDB1E0BDB4E0BDBE5D') . hash('sha256',$this->fields['passwordn'][0]));
		$this->fields['passwordn'][0]='';
		$insql="insert into user set ts=null,".$extra."emailp='".$em."',password='".$ph."',active='xx'";
		Settings::$sql->query($insql);
		if ($rx = Settings::$sql->query($qry)) {
			require_once("/websites/shared/lib/PHPMailer/PHPMailerAutoload.php");
			while ($f = $rx->fetch_assoc()) {
				$mail_v=new NView(@static::$v[static::SIG."email_body"]);
				$mail = new PHPMailer();
				$mail->isSendmail();
				$mail->CharSet='utf-8';
				$mail->Encoding='base64';
				$mail->setFrom('no_reply@redsnapper.net', Dict::get(static::SIG .'note_register_title'));
				$mail->addAddress($em,$f['emailp']); 				
				$mail->Subject = Dict::get(static::SIG.'note_register_title');
				$mail->isHTML(true);
				$url=$_SERVER["SCRIPT_URI"];
				if (strpos($url, '?') !== false) {
					$url .= '&amp;siof=' . $f['munge'];
				} else {
					$url .= '?siof=' . $f['munge'];
				}			
				$mail_v->set("//*[@data-xp='ha']/@href",$url);
				$mail->Body = $mail_v->show(false);
				$mail->AltBody=Dict::get(static::SIG.'mesg_see_html_alt');
				$mail->send();
			}
			$rx->close();
		}
		$this->show = true;
		$this->view = new NView(@static::$v[static::SIG."check_mail"]);
		return true;
	}
	
	public static function conforms($hat=NULL) {
		$retval=false;
		$ha=Settings::esc($hat); 
		$query= "select id from user where ".static::$munge."='".$ha."'";
		if ($rs = Settings::$sql->query($query)) {
			if (Settings::rows($rs) == 1) {
				$retval=true;
			}
			$rs->close();
		}
		return $retval;
	}
	
	public static function push_it($hat=NULL) {
		$ha=Settings::esc($hat); 
		$query= "update user set email=emailp,active='on' where active='xx' and ".static::$munge."='".$ha."'";
		Settings::$sql->query($query);
		$nv = new NView(@static::$v[static::SIG."success"]);
		return $nv;
	}


	public static function initialise($using_un=true) {	
		static::$use_un=$using_un;
//views array
		static::$v=array( 
			static::SIG."email_body"=>static::SIG."mv.ixml",
			static::SIG."success"=>static::SIG."sv.ixml",
			static::SIG."check_mail"=>static::SIG."pv.ixml"
		);
	
//translations
		$en = array(
			static::SIG ."prompt_email"=>"Email",
			static::SIG ."prompt_password"=>"Password",
			static::SIG ."prompt_retype_password"=>"Retype Password",
			static::SIG ."button_register"=>"Register",
			static::SIG ."note_register_title"=>"Registration Request",
			static::SIG ."note_register_message"=>" It appears that you have chosen to register on the website.",
			static::SIG ."note_register_action_link"=>" Please click here to confirm your registration.",
			static::SIG ."errors_email_badformat"=>" The email format is not recognised.",
			static::SIG ."errors_email_exists"=>" A user with this email already exists on the system. Please use another email.",
			static::SIG ."errors_no_email"=>" You must enter an email address.",
			static::SIG ."errors_no_password"=>" You must enter a password.",
			static::SIG ."errors_new_pw_different"=>" Both passwords must be the same.",
			static::SIG ."errors_new_pw_too_short"=>" Passwords must be more than 6 characters.",
			static::SIG ."mesg_register_check_email"=>"To set your email address, confirm the change via the email just sent to you.",
			static::SIG ."mesg_see_html_alt"=>"Please see the html alternative of this email.",
			static::SIG ."mesg_success"=>"You have successfully registered."
		);
		
		if(static::$use_un) {
			static::$v[static::SIG]=static::SIG."uv.ixml";
			$en[static::SIG ."prompt_username"]="Username";
			$en[static::SIG ."errors_username_exists"]="This username already exists on the system. Please choose another.";
			$en[static::SIG ."errors_username_empty"]="You need to enter a username.";
			$en[static::SIG ."errors_new_pw_too_un_simple"]=" Passwords must be different from your username!";
		} else {
			static::$v[static::SIG]=static::SIG."mv.ixml";
			$en[static::SIG ."errors_new_pw_too_em_simple"]=" Passwords must be different from your email!";
		}
		
		Dict::set($en,'en');
	}

}
