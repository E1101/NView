<?php
mb_internal_encoding('UTF-8');

/**
 * class 'Settings'
 */
class Settings extends Singleton {

	public static $sphinx=null;
	public static $sql=null;
	public static $url=null; //current url
	public static $usr=array();	//current user details
	public static $req=array();	//querystring for unnamed parameters.
	public static $qst=array();	//associational querystring - for named parameters.
	private static $sqls=array();
	public static $website=null;

/**
 * '__construct'
 */
 
 	protected function __construct() {
		if($_SERVER['QUERY_STRING']) {
			parse_str($_SERVER['QUERY_STRING'],self::$qst);
			self::$req=array_keys(self::$qst);
		}
		self::$url=strtok($_SERVER["REQUEST_URI"],'?');
		if ( !empty($_SERVER['PHP_AUTH_USER']) ) { 
			self::$usr['RU']= $_SERVER['PHP_AUTH_USER'];
		} elseif ( isset($_SERVER['REDIRECT_REMOTE_USER']) ) { 
			self::$usr['RU']= $_SERVER['REDIRECT_REMOTE_USER']; 
		} elseif ( isset($_SERVER['REMOTE_USER']) ) { 
			self::$usr['RU']= $_SERVER['REMOTE_USER'];
		}  else { 
			self::$usr['RU']= 'unknown'; 
		}
		self::$usr['uid']=0;
		self::$usr['ID']=0;
		if(isset($_SERVER["RS_SQLCONFIG_FILE"])) { //the path to the my.cnf for this connection.
			self::$sql = mysqli_init();
			self::$sqls = parse_ini_file($_SERVER["RS_SQLCONFIG_FILE"]); 
			mysqli_options(self::$sql,MYSQLI_READ_DEFAULT_FILE,$_SERVER["RS_SQLCONFIG_FILE"]);
			mysqli_real_connect(self::$sql,self::$sqls['host'],self::$sqls['user'],self::$sqls['password'],self::$sqls['database']);
		} else {
			self::$sqls['host']=getenv('RS_SQLHOST');
			self::$sqls['user']=getenv('RS_SQLUSER');
			self::$sqls['password']=getenv('RS_SQLUSERPW');
			self::$sqls['database']=getenv('RS_DATABASE');
			self::$sql = new mysqli(self::$sqls['host'],self::$sqls['user'],self::$sqls['password'],self::$sqls['database']);
		}
		if (self::$sql->connect_error) {
    			die('SQL Connection Error (' . $mysqli->connect_errno . ') ' . $mysqli->connect_error);
		}
		$srch=getenv('RS_SEARCH_HOST');
		if (!empty($srch)) {
	                self::$sphinx = new mysqli(getenv('RS_SEARCH_HOST'),NULL,NULL,NULL,9306);
		} else {
			self::$sphinx = null;
		}
		self::$sql->set_charset("utf8");
		if (!self::table_exists("session")) {
			self::$sql->query("CREATE TABLE session(id varchar(255) NOT NULL,ts timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), KEY ts (ts)) ENGINE=InnoDB DEFAULT CHARSET=utf8");
		}
		if (!self::table_exists("sessiondata")) {
			self::$sql->query("CREATE TABLE sessiondata (sid varchar(200) NOT NULL,name varchar(128) NOT NULL,value longtext NOT NULL,PRIMARY KEY (sid,name)) ENGINE=InnoDB DEFAULT CHARSET=utf8");
		}
		if (!self::table_exists("user")) {
			self::$sql->query("CREATE TABLE user (id int(11) NOT NULL AUTO_INCREMENT,username varchar(68) NOT NULL DEFAULT '',password varchar(250) DEFAULT NULL,email text default NULL,emailp text default NULL,active char(2) DEFAULT 'on',ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,PRIMARY KEY (id),UNIQUE KEY username (username),UNIQUE KEY ausername (username,active)) ENGINE=InnoDB DEFAULT CHARSET=utf8");
		}
		self::$website='http';
		if($_SERVER["HTTPS"]=='on') { self::$website.='s'; }
		self::$website.='://' . $_SERVER["HTTP_HOST"] . '/';
	}

/**
 * 'usr'  initialise session, and user id etc.
 *        This requires a 'user' table.
 */
	public static function usr($construct = true) {
		if($construct) {
			if (Session::has('username')) {
				$name=Session::get('username'); 
				if (empty($name)) {
					Session::del();
					self::$usr['RU']='';
				} else {
					self::$usr['RU']=Session::get('username');
				}
			}
			if ($rx = self::$sql->query("select id,username,email from user where active='on' and username='". self::$usr['RU'] ."'")) {
				while ($row = $rx->fetch_assoc()) {
					self::$usr['ID']=$row['id'];
					self::$usr['username']=$row['username'];
					self::$usr['email']=$row['email'];
				}
				$rx->close();
			}
		} else {
			Session::del('username');
			self::$usr['ID']=NULL;
			self::$usr = array_splice(self::$usr,1);
			array_shift(self::$usr);
		}
	}

/**
 * 'rows' number of rows in a result.
 */
	public static function rows($rs) {
		$result = -1;
		if($rs instanceof mysqli_result) {
			$result = $rs->num_rows;
		}
		return $result;
	}

/**
 * 'esc' mysql escape.
 */
	public static function esc($s) {
		if(!is_null(self::$sql)) {
			self::$sql->real_escape_string($s);
		}
		return $s;
	}
	
	public static function table_exists($table) {
		$retval=false;
		if(!is_null(self::$sql)) {
			if ($rx = self::$sql->query("select count(*) as present from information_schema.columns where table_schema = '".self::$sqls['database']."' and table_name = '".$table."'")) {
				while ($row = $rx->fetch_assoc()) {
					if ($row['present'] > 0) {
						$retval = true;
					}
				}
				$rx->close();
			}
		}
		return $retval;
	}
	
	public static function field_exists($table,$fieldname) {
		$retval=false;
		if(!is_null(self::$sql)) {
			if ($rx = self::$sql->query("select count(*) as present from information_schema.columns where table_schema = '".self::$sqls['database']."' and table_name = '".$table."' and column_name = '".$fieldname."'")) {
				while ($row = $rx->fetch_assoc()) {
					if ($row['present'] == 1) {
						$retval = true;
					}
				}
				$rx->close();
			}
		}
		return $retval;
	}
	
	public static function sphinx_esc ( $s ) {
		$retval="";
		if (mb_check_encoding($s)) {
			$from = array ( '\\', '(',')','|','-','!','@','~','"','&', '/', '^', '$', '=', "'", "\x00", "\n", "\r", "\x1a" );
			$to   = array ( '\\\\', '\\\(','\\\)','\\\|','\\\-','\\\!','\\\@','\\\~','\\\"', '\\\&', '\\\/', '\\\^', '\\\$', '\\\=', "\\'", "\\x00", "\\n", "\\r", "\\x1a" );
			$retval=str_replace( $from, $to, $s );
		}
		return $retval; 
	}	

/**
 * 'close'
 */
	public static function close() {
		self::$sql->close();
		if (!empty(self::$sphinx)) {
			self::$sphinx->close();
		}
	}

}
